dispersiontest(dat.fit)
1-pchisq(600.60,43)
1-pchisq(600.60,43)
suppressWarnings(suppressMessages(library(pscl)))
fit.zip = zeroinfl(response ~ gender |  1 ,data=UGdat)
UGdat<-as.data.frame(lapply(dat, function(x,p) rep(x,p), dat[["counts"]]))
dat<-read.csv("sex.csv")
dat<-data.frame(
(rep(dat$Response,2)),
c(dat$Male,dat$Female),
as.factor(c(rep(1,nrow(dat)),rep(0,nrow(dat))))	)
names(dat)<-c("response","counts","gender")
str(dat)
cbind(head(dat) ,tail(dat))
UGdat<-as.data.frame(lapply(dat, function(x,p) rep(x,p), dat[["counts"]]))
fit.zip = zeroinfl(response ~ gender |  1 ,data=UGdat)
summary(fit.zip )
#mixing proportions
phi=as.numeric( exp(coef(fit.zip)[3])/(1+exp(coef(fit.zip)[3])) )
phi;1-phi
install.packages("emojifont")
library(emojifont)
library(emojifont)
install.packages("devtools")
devtools::install_github("GuangchuangYu/emojifont")
library(emojifont)
set.seed(123)
x <- rnorm(10)
set.seed(321)
y <- rnorm(10)
plot(x, y, cex=0)
text(x, y, labels=emoji('cow'), cex=1.5, col='steelblue', family='EmojiOne')
set.seed(123)
x <- rnorm(10)
set.seed(321)
y <- rnorm(10)
plot(x, y, cex=0)
text(x, y, labels=emoji('cow'), cex=1.5, col='steelblue', family='EmojiOne')
text(x, y, labels=emoji('cow'), cex=1.5, col='steelblue', family='EmojiOne')
library(showtext)
install.packages("showtext")
install.packages("showtext")
library(showtext)
text(x, y, labels=emoji('cow'), cex=1.5, col='steelblue', family='EmojiOne')
library(emojifont)
text(x, y, labels=emoji('cow'), cex=1.5, col='steelblue', family='EmojiOne')
text(x, y, labels=emoji('cow'), cex=1.5, col='steelblue', family='EmojiOne')
library(emojifont)
plot( ( smokers.fit$linear.predictors[1:5] )  - log(smokers$PersonYears)[1:5],
ylim=c(-8,-3.75) )
tab<-cbind(dat[which(dat$gender == 0),],dat[which(dat$gender == 1 ),-1])
setwd("G:\\math\\661")
dat<-read.csv("sex.csv")
dat<-data.frame(
(rep(dat$Response,2)),
c(dat$Male,dat$Female),
as.factor(c(rep(1,nrow(dat)),rep(0,nrow(dat))))	)
names(dat)<-c("response","counts","gender")
str(dat)
cbind(head(dat) ,tail(dat))
dat.fit<-glm(response ~ gender, family=poisson, weights=counts, data=dat)
summary(dat.fit)
tab<-cbind(dat[which(dat$gender == 0),],dat[which(dat$gender == 1 ),-1])
tab<-tab[,c(1,2,4)];tab[19,2]<-sum(tab[19:nrow(tab),2]);
tab[19,3]<-sum(tab[19:nrow(tab),3]);tab<-tab[1:19,]
names(tab)[2:3]<-c("Female","Male")
head(tab)
c(sum(tab[,2]),sum(tab[,1]*tab[,2]));    sum(tab[,1]*tab[,2])/sum(tab[,2])
sum( tab[,2]*((tab[,1]- 4.183871 )^2) ) / ( sum(tab[,2]) -1)
c(sum(tab[,3]),sum(tab[,1]*tab[,3]));    sum(tab[,1]*tab[,3])/sum(tab[,3])
sum( tab[,3]*((tab[,1]- 4.183871 )^2) ) / ( sum(tab[,3]) -1)
1-pchisq(3985.7,43)
tab<-cbind(dat[which(dat$gender == 0),],dat[which(dat$gender == 1 ),-1])
tab<-tab[,c(1,2,5)]
names(tab)[2:3]<-c("Female","Male");head(tab)
sex.n = by(dat$counts, dat$gender, sum)
sex.nb = glm.nb(response ~ gender, weights=counts, data=dat)
dat[which(dat$gender == 0),],dat[which(dat$gender == 1 ),-1]
dat
dat
dat
dat[which(dat$gender == 0),]
datt
tab
dat
tab<-cbind(dat[which(dat$gender == 0),],dat[which(dat$gender == 1 ),-1])
tab
sex.nb$theta
require(ggplot2)
UU<-data.frame(apply(U , 1, function(z) Norm(z-as.numeric(U[ 500,]) )^2),	1:length(UU))
U<-as.data.frame(sdat$u[,1:2]);V<-as.data.frame(sdat$v[,1:2] )
sdat<-svd(as.matrix(dat))
options(width = 1111)
setwd("G:\\math\\504")
setwd("G:\\math\\504")
options(scipen=999)
Norm <- function(w){  sqrt(sum(w^2))}
require(ggplot2)
dat<-read.table("user-shows.txt")
shows<-read.table("shows.txt")
alex<-read.table("alex.txt");colnames(alex)<-as.vector(shows$V1)
sdat<-svd(as.matrix(dat))
par(mar=c(5.1,4.1,2.1,2.1))
plot(sdat[[1]])
head( sum(sdat[[1]])-cumsum(sdat[[1]]) ); tail(sum(sdat[[1]])-cumsum(sdat[[1]]))
plot(sdat[[1]],xlim=c(0,20))
U<-as.data.frame(sdat$u[,1:2]);V<-as.data.frame(sdat$v[,1:2] )
UU<-data.frame(apply(U , 1, function(z) Norm(z-as.numeric(U[ 500,]) )^2),	1:length(UU))
U<-as.data.frame(sdat$u[,1:2]);V<-as.data.frame(sdat$v[,1:2] )
UU<-data.frame(apply(U , 1, function(z) Norm(z-as.numeric(U[ 500,]) )^2),	1:length(U))
U<-as.data.frame(sdat$u[,1:2]);V<-as.data.frame(sdat$v[,1:2] )
UU<-data.frame(apply(U , 1, function(z) Norm(z-as.numeric(U[ 500,]) )^2),	1:nrow(U))
buddies<-order(UU[,1])[ 2:10]
ggplot(U,aes(V1,V2)) + geom_point() +  geom_point(data=U[500,], colour="red") +
geom_point(data=U[buddies,], colour="green")
Mr<-read.table("mr.txt")
Mr
Mr<-read.table("mr.txt");Mr<-as.numeric(Mr)
Mr
Mr<-read.table("mr.txt");Mr<-as.numeric(Mr[,1])
Mr
recommend<-dat[buddies,]
recommend
recommend<-rbind(recommend,colSums(recommend))
colnames( recommend[ 10,which( recommend[10, ] > 15 )] )
recommend
recommend
head(dat)
colnames(dat)<-as.vector(shows$V1)
head(dat)
recommend<-dat[buddies,]
recommend<-rbind(recommend,colSums(recommend))
recommend
colnames( recommend[ 10,which( recommend[10, ] > 15 )] )
colnames( recommend[ 10,which( recommend[10, ] > 1 )] )
colnames( recommend[ 10,which( recommend[10, ] > 8 )] )
buddies
buddies<-order(UU[,1])[ 2:30]
recommend<-dat[buddies,]
recommend<-rbind(recommend,colSums(recommend))
colnames( recommend[ 10,which( recommend[10, ] > 8 )] )
colnames( recommend[ 10,which( recommend[10, ] > 5 )] )
colnames( recommend[ 10,which( recommend[10, ] > 3 )] )
colnames( recommend[ 10,which( recommend[10, ] > 1 )] )
colnames( recommend[ 10,which( recommend[10, ] > 2 )] )
recommend<-rbind(recommend,colSums(recommend))
recommend<-dat[buddies,]
recommend<-rbind(recommend,colSums(recommend))
recommend
colnames( recommend[ 10,which( recommend[10, ] > 2 )] )
recommend<-dat[buddies,]
setwd("G:\\math\\504")
options(scipen=999)
Norm <- function(w){  sqrt(sum(w^2))}
require(ggplot2)
dat<-read.table("user-shows.txt")
shows<-read.table("shows.txt")
alex<-read.table("alex.txt");colnames(alex)<-as.vector(shows$V1)
sdat<-svd(as.matrix(dat))
par(mar=c(5.1,4.1,2.1,2.1))
plot(sdat[[1]])
head( sum(sdat[[1]])-cumsum(sdat[[1]]) ); tail(sum(sdat[[1]])-cumsum(sdat[[1]]))
plot(sdat[[1]],xlim=c(0,20))
U<-as.data.frame(sdat$u[,1:2]);V<-as.data.frame(sdat$v[,1:2] )
UU<-data.frame(apply(U , 1, function(z) Norm(z-as.numeric(U[ 500,]) )^2),	1:nrow(U))
buddies<-order(UU[,1])[ 2:30]
ggplot(U,aes(V1,V2)) + geom_point() +    geom_point(data=U[buddies,], colour="green") +
geom_point(data=U[500,], colour="red")
ggplot(U,aes(V1,V2)) + geom_point() +    geom_point(data=U[500,], colour="red")+    xlim(-0.008173631-.001, -0.008173631+.001)  +
ylim(-0.0008980471-.001, -0.0008980471+.001) + geom_point(data=U[buddies,], colour="green")
colnames(dat)<-as.vector(shows$V1)
recommend<-dat[buddies,]
recommend<-rbind(recommend,colSums(recommend))
ggplot(V,aes(V1,V2)) + geom_point() +
geom_point(data=V[ which(dat[500,] == 1),], colour="red")  +
geom_point(data=V[ Mr,], colour="green")
Mr<-read.table("mr.txt");Mr<-as.numeric(Mr[,1])
ggplot(V,aes(V1,V2)) + geom_point() +
geom_point(data=V[ which(dat[500,] == 1),], colour="red")  +
geom_point(data=V[ Mr,], colour="green")
colnames( recommend[ 10,which( recommend[10, ] > 2 )] )
recommend
colnames( recommend[ nrow(recommend),which( recommend[10, ] > 2 )] )
head(recommend)
tail(recommend)
recommend[,which( recommend[10, ] > 15 )]
recommend[30,which( recommend[10, ] > 15 )]
recommend[ ,which( recommend[10, ] > 15 )]
which( recommend[10, ] > 15 )
recommend[ ,which( recommend[30, ] > 15 )]
colnames(recommend[ ,which( recommend[30, ] > 15 )])
ggplot(V,aes(V1,V2)) + geom_point() +
geom_point(data=V[ which(dat[500,] == 1),], colour="red")  +
geom_point(data=V[ Mr,], colour="green")
colnames(recommend[ ,which( recommend[30, ] > 14 )])
length( colnames(recommend[ ,which( recommend[30, ] > 14 )]) )
colnames(recommend[ ,which( recommend[30, ] > 14 )])
colnames(recommend[ ,which( recommend[30, ] > 14 )])[-c(1,3)]
data.frame(colnames(recommend[ ,which( recommend[30, ] > 14 )])[-c(1,3)]  )
require(ggplot2, quietly = T)
options(scipen = 999)
install.packages("evd")
require(fpp2)
fc <- hw(subset(hyndsight,end=length(hyndsight)-35),
damped = TRUE, seasonal="multiplicative", h=35)
autoplot(hyndsight) +
autolayer(fc, series="HW multi damped", PI=FALSE)+
guides(colour=guide_legend(title="Daily forecasts"))
autoplot(hyndsight)
fc, series="HW multi damped", PI=FALSE
fc
hyndsight
plot(hyndsight)
bg <- rgamma( 10000, sum( skin[,1] ) + .5 ,  nrow(skin) )
setwd("G:\\math\\640")
require(mcmcplots, quietly = T)
require(ggplot2, quietly = T)
skin <- read.table( "skin.txt"  , header = T)
bg <- rgamma( 10000, sum( skin[,1] ) + .5 ,  nrow(skin) )
qu <- quantile(bg, probg = c(0.5, 0.025, 0.975))[2:3]
d <- data.frame( density(bg)[[1]], round(density(bg)[[2]],6) )
colnames(d) = c("x" , "y" )
d$area <- d[,1] > qu[1] & d[,1] < qu[2]
d
ggplot( data = d , aes(x=x , y=y)    ) + geom_line( col="brown" , size = 1) +
geom_ribbon(data = d[which(d$area == T),], aes(x, ymin=0 ,ymax=y), fill="brown", alpha = .2) +
theme(legend.position="none")
d$area
bg <- rgamma( 10000, sum( skin[,1] ) + .5 ,  nrow(skin) )
qu <- quantile(bg, prob  = c(0.5, 0.025, 0.975))[2:3]
d <- data.frame( density(bg)[[1]], round(density(bg)[[2]],6) )
colnames(d) = c("x" , "y" )
d$area <- d[,1] > qu[1] & d[,1] < qu[2]
X <- 165
n <- 716
Nsim <- 10000
alpha1 = X + 1
Beta1 = n - X + 1
bs1  <- matrix( rbeta(Nsim, alpha1 , Beta1 ), , 1)
# posterior mean
mean( bs1 )
# 95% credible interval
quantile(bs1, probs = c(0.5, 0.025, 0.975))
qu <- quantile(bs1, probs = c(0.5, 0.025, 0.975))[2:3]
d <- data.frame( density(bs1)[[1]], round(density(bs1)[[2]],6) )
colnames(d) = c("x" , "y" ); d$area <- d[,1] > qu[1] & d[,1] < qu[2]
ggplot( data = d , aes(x=x , y=y)    ) + geom_line( col="red"  ) +
geom_ribbon(data = d[which(d$area == T),], aes(x, ymin=0 , ymax=y ), fill="red", alpha = .2) +
theme(legend.position="none")
setwd("G:\\math\\640")
require(mcmcplots, quietly = T)
require(ggplot2, quietly = T)
skin <- read.table( "skin.txt"  , header = T)
X <- 165
n <- 716
Nsim <- 10000
alpha1 = X + 1
Beta1 = n - X + 1
bs1  <- matrix( rbeta(Nsim, alpha1 , Beta1 ), , 1)
# posterior mean
mean( bs1 )
# 95% credible interval
quantile(bs1, probs = c(0.5, 0.025, 0.975))
qu <- quantile(bs1, probs = c(0.5, 0.025, 0.975))[2:3]
d <- data.frame( density(bs1)[[1]], round(density(bs1)[[2]],6) )
colnames(d) = c("x" , "y" ); d$area <- d[,1] > qu[1] & d[,1] < qu[2]
ggplot( data = d , aes(x=x , y=y)    ) + geom_line( col="red"  ) +
geom_ribbon(data = d[which(d$area == T),], aes(x, ymin=0 , ymax=y ), fill="red", alpha = .2) +
theme(legend.position="none")
Y <- 175
m <- 919
alpha2 = X + Y + 1
Beta2 = m + n - ( X + Y ) + 1
set.seed(1)
bs2	<-  rbeta(Nsim, alpha2 , Beta2  )
median(bs2)
# 95% credible interval
quantile(bs2, probs2 = c(0.5, 0.025, 0.975))
qu <- quantile(bs2, probs2 = c(0.5, 0.025, 0.975))[2:3]
d <- data.frame( density(bs2)[[1]], round(density(bs2)[[2]],6) )
colnames(d) = c("x" , "y" )
d$area <- d[,1] > qu[1] & d[,1] < qu[2]
ggplot( data = d , aes(x=x , y=y)    ) + geom_line( col="blue" , ) +
geom_ribbon(data = d[which(d$area == T),], aes(x, ymin=0 , ymax=y), fill="blue", alpha = .2) +
theme(legend.position="none")
Y <- 175
m <- 919
alpha2 = X + Y + 1
Beta2 = m + n - ( X + Y ) + 1
set.seed(1)
bs2	<-  rbeta(Nsim, alpha2 , Beta2  )
median(bs2)
# 95% credible interval
quantile(bs2, probs2 = c(0.5, 0.025, 0.975))
qu <- quantile(bs2, probs2 = c(0.5, 0.025, 0.975))[2:3]
d <- data.frame( density(bs2)[[1]], round(density(bs2)[[2]],6) )
colnames(d) = c("x" , "y" )
d$area <- d[,1] > qu[1] & d[,1] < qu[2]
ggplot( data = d , aes(x=x , y=y)    ) + geom_line( col="blue" , ) +
geom_ribbon(data = d[which(d$area == T),], aes(x, ymin=0 , ymax=y), fill="blue", alpha = .2) +
theme(legend.position="none")
X
alpha2
Y <- 175
m <- 919
alpha2 = X + Y + 1
Beta2 = m + n - ( X + Y ) + 1
set.seed(1)
bs2	<-  rbeta(Nsim, alpha2 , Beta2  )
median(bs2)
# 95% credible interval
quantile(bs2, probs2 = c(0.5, 0.025, 0.975))
qu <- quantile(bs2, probs2 = c(0.5, 0.025, 0.975))[2:3]
d <- data.frame( density(bs2)[[1]], round(density(bs2)[[2]],6) )
colnames(d) = c("x" , "y" )
d$area <- d[,1] > qu[1] & d[,1] < qu[2]
ggplot( data = d , aes(x=x , y=y)    ) + geom_line( col="blue" , ) +
geom_ribbon(data = d[which(d$area == T),], aes(x, ymin=0 , ymax=y), fill="blue", alpha = .2) +
theme(legend.position="none")
qu <- quantile(bs1, probs = c(0.5, 0.025, 0.975))[2:3]
qu
bs1
Y <- 175
m <- 919
alpha2 = X + Y + 1
Beta2 = m + n - ( X + Y ) + 1
set.seed(1)
bs2	<-  rbeta(Nsim, alpha2 , Beta2  )
median(bs2)
# 95% credible interval
quantile(bs2, probs2 = c(0.5, 0.025, 0.975))
denplot(bs3, main = "Sampled Posterior Density", lwd = 8)
Y <- 175
m <- 919
alpha2 = X + Y + 1
Beta2 = m + n - ( X + Y ) + 1
set.seed(1)
bs2	<-  rbeta(Nsim, alpha2 , Beta2  )
median(bs2)
# 95% credible interval
quantile(bs2, probs2 = c(0.5, 0.025, 0.975))
denplot(bs2, main = "Sampled Posterior Density", lwd = 8)
# 95% credible interval
quantile(bs2, probs = c(0.5, 0.025, 0.975))
qu <- quantile(bs1, probs = c(0.5, 0.025, 0.975))[2:3]
# 95% credible interval
quantile(bs2, probs = c(0.5, 0.025, 0.975))
qu <- quantile(bs2, probs = c(0.5, 0.025, 0.975))[2:3]
d <- data.frame( density(bs2)[[1]], round(density(bs2)[[2]],6) )
colnames(d) = c("x" , "y" ); d$area <- d[,1] > qu[1] & d[,1] < qu[2]
ggplot( data = d , aes(x=x , y=y)    ) + geom_line( col="red"  ) +
geom_ribbon(data = d[which(d$area == T),], aes(x, ymin=0 , ymax=y ), fill="red", alpha = .2) +
theme(legend.position="none")
alpha2
Beta2
alpha1
Beta1
# 95% credible interval
quantile(bs2, probs = c(0.5, 0.025, 0.975))
# 95% credible interval
quantile(bs3, probs3 = c(0.5, 0.025, 0.975))
# 95% credible interval
quantile(bs3, probs3 = c(0.5, 0.025, 0.975))
Z <- 142
l <- 1289
alpha3 =  Z + 1
Beta3 = l  -  Z   + 1
set.seed(1)
bs3	<-  rbeta(Nsim, alpha3 , Beta3  )
mean(bs3)
# 95% credible interval
quantile(bs3, probs3 = c(0.5, 0.025, 0.975))
quantile(bs3, probs3 = c(0.5, 0.025, 0.975))
# 95% credible interval
quantile(bs3, probs3 = c(0.5, 0.025, 0.975))
# 95% credible interval
quantile(bs2, probs = c(0.5, 0.025, 0.975))
# 95% credible interval
quantile(bs3, probs = c(0.5, 0.025, 0.975))
# 95% credible interval
quantile(bs3, probs  = c(0.5, 0.025, 0.975))
quantile(bs3, probs = c(0.5, 0.025, 0.975))
Z <- 142
Z <- 142
l <- 1289
alpha3 =  Z + 1
Beta3 = l  -  Z   + 1
set.seed(1)
bs3	<-  rbeta(Nsim, alpha3 , Beta3  )
mean(bs3)
# 95% credible interval
quantile(bs3, probs  = c(0.5, 0.025, 0.975))
qu <- quantile(bs3, probs  = c(0.5, 0.025, 0.975))
d <- data.frame( density(bs3)[[1]], round(density(bs3)[[2]],6) )
colnames(d) = c("x" , "y" )
d$area <- d[,1] > qu[1] & d[,1] < qu[2]
g3 <- ggplot( data = d , aes(x=x , y=y)    ) + geom_line( col="green" , ) +
geom_ribbon(data = d[which(d$area == T),], aes(x, ymin=0 , ymax=y), fill="green", alpha = .2) +
theme(legend.position="none") ; g3
d
qu
qu <- quantile(bs3, probs  = c(0.5, 0.025, 0.975))
mean(bs2)
rm(list = ls())
setwd("G:\\math\\640")
options(scipen=999)
set.seed(2020)
data <- read.csv("incidenceUK.txt", header=TRUE, sep="")
xM <- data$male
xF <- data$female
k <- 22
n <- nrow(data)
B <- 10000
postM <- rnorm(B,
mean = (k*n-1)/sum(xM),
sd = (k*n-1)/sum(xM)^2
)
postF <- rnorm(B,
mean = (k*n-1)/sum(xF),
sd = (k*n-1)/sum(xF)^2
)
postM
#males
mean(1/postM)
rm(list = ls())
setwd("G:\\math\\640")
options(scipen=999)
data <- read.csv("incidenceUK.txt", header=TRUE, sep="")
xM <- data$male
xF <- data$female
k <- 22
n <- nrow(data)
B <- 10000
set.seed(2020)
postM <- rnorm(B,
mean = (k*n-1)/sum(xM),
sd = (k*n-1)/sum(xM)^2
)
postF <- rnorm(B,
mean = (k*n-1)/sum(xF),
sd = (k*n-1)/sum(xF)^2
)
#males
mean(1/postM)
rm(list = ls())
setwd("G:\\math\\640")
options(scipen=999)
data <- read.csv("incidenceUK.txt", header=TRUE, sep="")
xM <- data$male
xF <- data$female
k <- 22
n <- nrow(data)
B <- 10000
set.seed(2020)
postM <- rnorm(B,
mean = (k*n-1)/sum(xM),
sd = sqrt((k*n-1)/sum(xM)^2)
)
postF <- rnorm(B,
mean = (k*n-1)/sum(xF),
sd = sqrt((k*n-1)/sum(xF)^2)
)
#males
mean(1/postM)
## [1] 48.60122
#females
mean(1/postF)
1/xx
library(mvtnorm)
options(scipen=999)
rm(list = ls())
setwd("G:\\math\\640")
library(mvtnorm)
options(scipen=999)
set.seed(1980)
coup <- read.csv("coup1980.txt", header=TRUE, sep="")
B <- 10000
n <- nrow(coup)
Y <- coup$logCoup
X <- as.matrix(cbind(rep(1, n), coup$democracy, coup$age, coup$tenure))
colnames(X) <- c('intercept','democracy','age','tenure')
p <- ncol(X)
bhat <- c(solve(t(X)%*%X)%*%(t(X)%*%Y))
SSY <- t(Y - X%*%bhat)%*%(Y - X%*%bhat)
XtXi <- solve(t(X)%*%X)
rbeta <- matrix(0, nrow = B, ncol = p)
rlambda <- rgamma(B, (n-p)/2, (1/2)*SSY)
for(i in 1:B){
CovX <- rlambda[i]^(-1)*XtXi
rbeta[i,] <- c(rmvnorm(1, mean = bhat, sigma = CovX))
}
rbMat <- apply(rbeta, 2, quantile, probs = c(0.5, 0.025, 0.975))
colnames(rbMat) <- colnames(X)
round(t(rbMat), 4)
bhat
rlambda
rlambda[1]
round(t(rbMat), 4)
set.seed(1980)
for(i in 1:B){
CovX <- rlambda[i]^(-1)*XtXi
rbeta[i,] <- c(rmvnorm(1, mean = bhat, sigma = CovX))
}
rbMat <- apply(rbeta, 2, quantile, probs = c(0.5, 0.025, 0.975))
colnames(rbMat) <- colnames(X)
round(t(rbMat), 4)
install.packages("reticulate")
install.packages("keras")
library(keras)
install_keras(method = "conda")
activate r-tensoflow
activate r-tensorflow
