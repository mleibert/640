numerator <- DF$N_h * DF$s_err
EO<-list()
for (i in 1:nrow(DF)){ EO[[i]]<- sqrt(seq(30,(N[i]-1),1)* (seq(30,(N[i ]-1),1)+1))}
for (i in 1:nrow(DF)){	EO[[i]]<-	numerator[i]/EO[[i]]} # NS/sqrt(n*n+1)
for (i in 1:length(numerator)) { EO[[i]]<-data.frame(EO[[i]],rep( DF$Stratum[i],length(
EO[[i]]))) }		#this convert into DF and put statum ID
EO<-do.call(rbind.data.frame, EO)
colnames(EO)<-c("PV","Stratum");
EO<-EO[order(-EO$PV),]
head(EO)
matx<-matrix(NA,nrow(EO),2)
matx[,1]<-EO$PV; matx[,2]<-EO$Stratum;
matx<- cbind(matx,matrix(0,nrow(EO),nrow(DFa) ),0,0)
colnames(matx) <- c("PV","Stratum", paste0("h_",DFa$Stratum), "n" , "Sd" )
######
matx <- rbind( matx[1,]*0, matx )
N <- DFa$N_h #nrow(matx)
matx[ 1 ,3:(ncol(matx) - 2)  ] <- DFa$MINn
matx[ 1 ,(ncol(matx) - 1) ] <- sum(matx[ 1 ,3:(ncol(matx) - 2)  ])
matx[ 1 ,(ncol(matx)) ] <- sqrt( sum((N*(N-matx[1,3:(ncol(matx)-2)])*
DFa$ss_err)/  (matx[1,3:(ncol(matx)-2)]) ) )
for (i in 2:10){
matx[i, 3:(2+nrow(DFa)) ] <- matx[i-1, 3:(2+nrow(DFa)) ]
matx[ i , which( colnames(matx) == paste0("h_", matx[i, 2] ) )] <-
matx[ i , which( colnames(matx) == paste0("h_", matx[i, 2] ) )] + 1
matx[i, (ncol(matx)-1)] <- sum(matx[i, 3:(ncol(matx)-2)] )
}
head(matx)
i = 2
matx[i-1, 3:(2+nrow(DFa)) ]
matx
head(matx)
matx<-matrix(NA,nrow(EO),2)
matx[,1]<-EO$PV; matx[,2]<-EO$Stratum;
matx<- cbind(matx,matrix(0,nrow(EO),nrow(DFa) ),0,0)
colnames(matx) <- c("PV","Stratum", paste0("h_",DFa$Stratum), "n" , "Sd" )
matx <- rbind( matx[1,]*0, matx )
N <- DFa$N_h #nrow(matx)
matx[ 1 ,3:(ncol(matx) - 2)  ] <- DFa$MINn
matx[ 1 ,(ncol(matx) - 1) ] <- sum(matx[ 1 ,3:(ncol(matx) - 2)  ])
matx[ 1 ,(ncol(matx)) ] <- sqrt( sum((N*(N-matx[1,3:(ncol(matx)-2)])*
DFa$ss_err)/  (matx[1,3:(ncol(matx)-2)]) ) )
round(matx[ 1, ]  ,2)
as.data.frame( round(matx[ 1, ]  ,2) )
as.data.frame( round(t(matx[ 1, ]  ,2) ))
as.data.frame( round(matx[ 1, ]  ,2) )
t( as.data.frame( round(matx[ 1, ]  ,2) ) )
datmat <- t( as.data.frame( round(matx[ 1, ]  ,2) ) )
rownames(datmat) <- NULL
print( datmat, row.names = F )
beep("mario")
require(beepr)
beep("mario")
print( head(round(matx,2)) , row.names = F )
print( as.data.frame( head(round(matx,2)) ) , row.names = F )
unlink('G:/bs/HIOS-11512_cache', recursive = TRUE)
unlink('G:/bs/HIOS-11512_cache', recursive = TRUE)
P <- .995
options(width = 1000)
setwd("G:/bs/")
bsno <- 11512
source("BSv3.R")
require(beepr)
blerg <- do.call(rbind, stratum );nrow(blerg)
datz <- rbind(datP , datN); nrow(datz)
all( (datz$ID %in% blerg$ID) == T)
all( (blerg$ID %in% datz$ID) == T)
sum( datz$CSR_PRVDD  ) ==sum( blerg$CSR_PRVDD )
#beep("mario")
options(scipen=999)
DFa <- data.frame( sapply(stratum,function(X) min(X$CSR_PRVDD))  ,
sapply(stratum,function(X) max(X$CSR_PRVDD))   )
DFa[,2] <- apply(DFa,1,function(X)    paste0( "(" ,round(X[1],2),", ",round(X[2],2),")" ) )
DFa[,1] <-   sapply(stratum,function(X) max(X$Stratum) )
colnames(DFa) <- c("Stratum" , "Bounds")
DFa$Variant <- sapply(stratum, function(X) X$Variant[1] )
DFa$payment <- sapply(stratum, function(X) X$payment[1] )
DFa$TotAmnt <- sapply(stratum, function(X) X$AMOUNT[1] )
DFa$N_h <- sapply(stratum,nrow)
DFa$MINn <- 0;
for( i in 1:length(censam)){ 	if(censam[i] == "C"){
DFa$MINn[i] <- DFa$N_h[i]}else{DFa$MINn[i] <- 30} }
DFa$ss_err <- round( sapply(stratum , function(X) var(X$error )   ), 2 )
DFa$s_err <- round( sqrt( DFa$ss_err  ) ,2  )
DFa[is.na(DFa)] <- 0
Nh <- DFa$N_h
N <- sum( DFa$N_h )
print(DFa, row.names = F)
DF <- DFa[ which(DFa$N_h != DFa$MINn) , ]
DF$mean_err <- round( sapply(stratum[DF$Stratum], function(X) mean(X$error )   ), 4 )
DF$s_err <- round( sapply(stratum[DF$Stratum], function(X) sd(X$error )   ), 4 )
N <- DF$N_h
print(DF[,-c((ncol(DF)-1),ncol(DF))], row.names = F)
numerator <- DF$N_h * DF$s_err
EO<-list()
for (i in 1:nrow(DF)){ EO[[i]]<- sqrt(seq(30,(N[i]-1),1)* (seq(30,(N[i ]-1),1)+1))}
for (i in 1:nrow(DF)){	EO[[i]]<-	numerator[i]/EO[[i]]} # NS/sqrt(n*n+1)
for (i in 1:length(numerator)) { EO[[i]]<-data.frame(EO[[i]],rep( DF$Stratum[i],length(
EO[[i]]))) }		#this convert into DF and put statum ID
EO<-do.call(rbind.data.frame, EO)
colnames(EO)<-c("PV","Stratum");
EO<-EO[order(-EO$PV),]
head(EO)
matx<-matrix(NA,nrow(EO),2)
matx[,1]<-EO$PV; matx[,2]<-EO$Stratum;
matx<- cbind(matx,matrix(0,nrow(EO),nrow(DFa) ),0,0)
colnames(matx) <- c("PV","Stratum", paste0("h_",DFa$Stratum), "n" , "Sd" )
######
matx <- rbind( matx[1,]*0, matx )
N <- DFa$N_h #nrow(matx)
matx[ 1 ,3:(ncol(matx) - 2)  ] <- DFa$MINn
matx[ 1 ,(ncol(matx) - 1) ] <- sum(matx[ 1 ,3:(ncol(matx) - 2)  ])
matx[ 1 ,(ncol(matx)) ] <- sqrt( sum((N*(N-matx[1,3:(ncol(matx)-2)])*
DFa$ss_err)/  (matx[1,3:(ncol(matx)-2)]) ) )
for (i in 2:10){
matx[i, 3:(2+nrow(DFa)) ] <- matx[i-1, 3:(2+nrow(DFa)) ]
matx[ i , which( colnames(matx) == paste0("h_", matx[i, 2] ) )] <-
matx[ i , which( colnames(matx) == paste0("h_", matx[i, 2] ) )] + 1
matx[i, (ncol(matx)-1)] <- sum(matx[i, 3:(ncol(matx)-2)] )
matx[i ,(ncol(matx)) ] <- sqrt( sum((N*(N-matx[i,3:
(ncol(matx)-2)])* DFa$ss_err)/  (matx[i,3:(ncol(matx)-2)]) ) )
}
matx[nrow(matx),3:(ncol(matx)-2)] <- DFa$N_h
matx[nrow(matx),  (ncol(matx)-1)] <- sum(matx[nrow(matx),3:(ncol(matx)-2)] )
matx[nrow(matx) ,(ncol(matx)) ] <- sqrt( sum((N*(N-matx[nrow(matx),3:
(ncol(matx)-2)])* DFa$ss_err)/  (matx[nrow(matx),3:(ncol(matx)-2)]) ) )
for( i in (nrow(matx)-1):(nrow(matx)-10) ){
matx[i,3:(ncol(matx)-2)] <-  matx[i+1,3:(ncol(matx)-2)]
matx[i, 2 +  matx[i+1 ,2]  ] <-  matx[i, 2 +  matx[i+1 ,2]  ] - 1
matx[i,  (ncol(matx)-1)] <- sum(matx[i,3:(ncol(matx)-2)] )
matx[i ,(ncol(matx)) ] <- sqrt( sum((N*(N-matx[i,3:
(ncol(matx)-2)])* DFa$ss_err)/  (matx[i,3:(ncol(matx)-2)]) ) )
}
#head(matx);tail(matx)
#sum(dat$CSR_PRVDD)
error <- sum(dat$CSR_PRVDD)*.0832 ;
#c( error - error *.1, error + error *.1 )
target <- error *.1 /  qnorm(.95)
for (i in 11:nrow(matx)){
if( matx[i-1, ncol(matx)] < target ){break}
matx[i, 3:(2+nrow(DFa)) ] <- matx[i-1, 3:(2+nrow(DFa)) ]
matx[ i , which( colnames(matx) == paste0("h_", matx[i, 2] ) )] <-
matx[ i , which( colnames(matx) == paste0("h_", matx[i, 2] ) )] + 1
matx[i, (ncol(matx)-1)] <- sum(matx[i, 3:(ncol(matx)-2)] )
}
##
print( as.data.frame( head(round(matx,2)) ) , row.names = F )
sum(dat$CSR_PRVDD)
TOTerror <- sum(dat$CSR_PRVDD)*.0832 ; TOTerror
TOTerror *.1; t1 <- TOTerror *.1
target <- TOTerror *.1 /  qnorm(.95); target
matx<-as.data.frame(matx)
DFa$s_err <- round(sqrt(as.numeric(DFa$ss_err)),2)
blergs <- sapply(stratum, function(X) sd(X$CSR_PRVDD ))
blergs[is.na(blergs)] <- 0
DFa$sdTA <- round(blergs,2)
#
DFa <- DFa[, c(1:5,ncol(DFa) , 6:(ncol(DFa)-1)) ]
DFa$n <-as.numeric( matx[ tail( which(matx$Sd >  target ) , 1 ) , 3:(ncol(matx)-2)] )
if( nrow( matx[ tail( which(matx$Sd >  target ) , 2 ) , 3:(ncol(matx)-0)] 	) == 0 ) { DFa$n <- DFa$MINn }
print(rbind(DFa,c("Totals", "-" , "-" , "", sum(as.numeric(DFa$TotAmnt)), sum(as.numeric(DFa$sdTA)), sum(DFa$N_h),
sum(DFa$MINn), sum(DFa$ss_err) , sum(DFa$s_err) ,sum(DFa$n)   )), row.names = F )
fy <- function(y,mu,ss,n)( prod( (1+ (1/(n-1) * ((y-mu)^2/(ss))))^(-n/2)  ) )
fx <- function(x){ ifelse( x < 0 , 0,
ifelse( 0 <= x & x < 0.5 ,  4*x ,
ifelse( 0.5 <= x & x <= 1, 4-4*x,
ifelse(  x < 1, 0, 0 )
)))}
### U(0,1) ###
curve(fx, from = 0-.05, to = 1+.05)
M <- 2
curve(M *dunif(x, 0, 1), add=TRUE, col="gold", lwd=2)
theta	<- vector(length = 1000)
arr <- NULL
t <- 1
count	<- 1
while(t < 100){
tb	<- runif(1)
U	<- runif(1)
r <- fx(tb) / (M*dunif(tb))
if(U < r){
theta[t] <- tb
t <- t + 1
points( tb , M*U , col = "red" , pch = 16) } else {
points( (tb) ,M*U , col = "blue" , pch = 4) }
count	<- count + 1 }
t/count
mean(theta)
### Beta(2,2) ###
curve(fx, from = 0-.05, to = 1+.05 )
M <- fx(.5) / ( (0.5)*(1-0.5) * (6) )
curve(M *dbeta(x, 2, 2), add=T, col="darkblue", lwd=2)
theta	<- vector(length = 1000)
arr <- NULL
t <- 1
count	<- 1
while(t < 100){
tb	<- rbeta(1,2,2)
U	<- runif(1)
r <- fx(tb) / (M*dbeta(tb,2,2))
if(U < r){
theta[t] <- tb
t <- t + 1
points( tb , M*U*dbeta(tb,2,2) , col = "red" , pch = 16) } else {
points( (tb) ,M*U*dbeta(tb,2,2) , col = "blue" , pch = 4) }
count	<- count + 1 }
t/count
#plot(density(theta), lwd = 8, col = 'blue')
#curve(dbeta(x, 6, 3), add = TRUE, col = 'red', lwd = 8)
mean(theta)
setwd("G:\\math\\640")
require(mvtnorm, quietly = T)
require(MCMCpack, quietly = T)
require(mcmcplots, quietly = T)
require(invgamma, quietly = T)
hers	<- read.table('hersreg.txt', header = TRUE)
colnames(hers)[1] <- "y"
hers0 <- hers[ which(hers[ ,2] == 0), 1:2]
B <- 10000
ss <- Alpha <- mu <- rep(NA,B)
ss[1] <- Alpha[1] <- mu[1] <- 1
v <- 1
n0 <- nrow(hers0)
set.seed(32717)
for (t in 2:B) {
Alpha[t] <- rinvgamma(1, (n0)/2 + .0001 ,
.0001 + (1/ss[t-1])  * sum( (hers0$y - mu[t-1] )^2 ) )
mu[t] <- rnorm(1, mean(hers0$y) , sqrt( Alpha[t]*ss[t-1] / n0) )
ss[t] <- rinvgamma( 1 , (n0/2)+.0001 ,  .0001 + (1/(2*Alpha[t])) *
sum( ( hers0$y - mu[t] )^2 )   )
}
# Burn in
Alpha <- matrix( tail(Alpha,B/2), ncol = 1);colnames(Alpha) <- "alpha"
mu <- matrix( tail(mu,B/2), ncol = 1);colnames(mu) <- "mu"
ss <- matrix( tail(ss,B/2), ncol = 1);colnames(ss) <- "sigma^2"
mcmcplot1(  ss , greek = T )
geweke.diag(mcmc(ss))
mcmcplot1(  Alpha, greek = T )
geweke.diag(mcmc(Alpha))
mcmcplot1(  mu , greek = T)
geweke.diag(mcmc(mu))
hers1 <- hers[ which(hers[ ,2] == 1), 1:2]
ss <- Alpha <- mu <- rep(NA,B)
ss[1] <- Alpha[1] <- mu[1] <- 1
v <- 1
n <- nrow(hers1)
set.seed(32717)
for (t in 2:B) {
Alpha[t] <- rinvgamma(1, (n)/2 + .1,
50 + (1/ 2 * ss[t-1])  * sum( (hers1$y - mu[t-1] )^2 ) )
mu[t] <- rnorm(1, mean(hers1$y) , sqrt( Alpha[t-1]*ss[t-1] / n) )
ss[t] <- rinvgamma( 1 , (n/2)+.1 ,  50 + (1/(2*Alpha[t])) *
sum( ( hers1$y - mu[t] )^2 )   )
}
# Burn in
Alpha <- matrix( tail(Alpha,B/2), ncol = 1);colnames(Alpha) <- "alpha"
mu <- matrix( tail(mu,B/2), ncol = 1);colnames(mu) <- "mu"
ss <- matrix( tail(ss,B/2), ncol = 1);colnames(ss) <- "sigma^2"
mcmcplot1(  ss , greek = T )
geweke.diag(mcmc(ss))
mcmcplot1(  Alpha, greek = T )
geweke.diag(mcmc(Alpha))
mcmcplot1(  mu , greek = T)
geweke.diag(mcmc(mu))
fy(  hers1$y, mean(hers1$y) , var(hers1$y), nrow(hers1) )
curve(fy(x, mean(hers1$y) , var(hers1$y), nrow(hers1) ), from = -100 , to = 100 )
fy <- function(y,mu,ss,n)(  ( (1+ (1/(n-1) * ((y-mu)^2/(ss))))^(-n/2)  ) )
fy(  hers1$y, mean(hers1$y) , var(hers1$y), nrow(hers1) )
curve(fy(x, mean(hers1$y) , var(hers1$y), nrow(hers1) ), from = -100 , to = 100 )
curve(dcauchy(x,median(hers1$y), sd(hers1$y)), from = -100 , to = 100 )
curve(fy(x, mean(hers1$y) , var(hers1$y), nrow(hers1) ), from = -100 , to = 100 , add = T )
library(mvtnorm)
library(MCMCpack)
library(mcmcplots)
require(invgamma)
setwd("G:\\math\\640")
hers	<- read.table('hersreg.txt', header = TRUE)
tail(hers)
colnames(hers)[1] <- "y"
hers0 <- hers[ which(hers[ ,2] == 0), 1:2]
hers1
hers0
n
n0
n <- nrow(hers1)
n0 <- nrow(hers0)
-n0^2/2 + n/(var(hers0$y)*(n-1)) * sum(hers0$y - mean(hers0$y)^2)
-n0^2/2 + n0/(var(hers0$y)*(n-1)) * sum(hers0$y - mean(hers0$y)^2)
-n0^2/2 + n0/(var(hers0$y)*(n0-1)) * sum(hers0$y - mean(hers0$y)^2)
fyy <- function(x,n){-n^2/2 + n/(var(x)*(n-1)) * sum(x - mean(x)^2)}
fyy(hers0$y,n0)
-n0^2/2 + n0/(var(hers0$y)*(n0-1)) * sum(hers0$y - mean(hers0$y)^2)
dauchy
dcauchy
log(dcauchy(1,median(hers0$y),sd(hers0$y)))
fyy <- function(x,n){(-n^2/2 + n/(var(x)*(n-1)) * sum(x - mean(x)^2)) / log(dcauchy(1,median(x),sd(x)))}
optimize( fyy , interval=c(-200, 200), maximum=T)
n
optimize( fyy(x,n0) , interval=c(-200, 200), maximum=T)
n0
fyy <- function(x ){(-1317^2/2 + 1317/(var(x)*(1317-1)) * sum(x - mean(x)^2)) / log(dcauchy(1,median(x),sd(x)))}
optimize( fyy(x ) , interval=c(-200, 200), maximum=T)
fyy <- function(x ){(-1317^2/2 + 1317/(var(x)*(1317-1)) * sum(x - mean(x)^2)) / log(dcauchy(x,median(x),sd(x)))}
optimize( fyy(x ) , interval=c(-200, 200), maximum=T)
x,median(x),sd(x)
fyy <- function(y){(-1317^2/2 + 1317/(var(y)*(1317-1)) * sum(y - mean(y)^2)) / log(dcauchy(x,median(y),sd(y)))}
optimize( fyy(x ) , interval=c(-200, 200), maximum=T)
mean(y)
y
rm(y)
fyy <- function(y){(-1317^2/2 + 1317/(var(y)*(1317-1)) * sum(y - mean(y)^2)) / log(dcauchy(x,median(y),sd(y)))}
optimize( fyy(x) , interval=c(-200, 200), maximum=T)
optimize( fyy(y) , interval=c(-200, 200), maximum=T)
x
rm(x)
x
hers1
fyy <-  function(y)(  ((1+ (1/(nrow(hers1)-1) * (
(y- mean(hers1$y))^2/(var(hers1$y)))))^(-nrow(hers1)/2)  )  /
dcauchy(y,median(hers1$y),sd(hers1$y) ) )
optimize( fyy , interval=c(-200, 200), maximum=T)
hers1 <- hers0
fyy <-  function(y)(  ((1+ (1/(nrow(hers1)-1) * (
(y- mean(hers1$y))^2/(var(hers1$y)))))^(-nrow(hers1)/2)  )  /
dcauchy(y,median(hers1$y),sd(hers1$y) ) )
optimize( fyy , interval=c(-200, 200), maximum=T)
fyy <- function(y){(-1317^2/2 + 1317/(var(y)*(1317-1)) * sum(y - mean(y)^2)) / log(dcauchy(x,median(y),sd(y)))}
optimize( fyy , interval=c(-200, 200), maximum=T)
fyy <- function(y){(-1317^2/2 + 1317/(var(y)*(1317-1)) * sum(y - mean(y)^2)) / log(dcauchy(y,median(y),sd(y)))}
optimize( fyy , interval=c(-200, 200), maximum=T)
optimize( fyy ,  maximum=T)
curve(fyy)
fyy <- function(y){(-1317^2/2 + 1317/(var(y)*(1317-1)) * sum(y - mean(y)^2)) )}
fyy <- function(y){(-1317^2/2 + 1317/(var(y)*(1317-1)) * sum(y - mean(y)^2)) }
optimize( fyy , interval=c(-200, 200), maximum=T)
optimize( fyy(x) , interval=c(-200, 200), maximum=T)
curve(fyy(x)  )
fyy <- function(y){(-1317^2/2 + 1317/(var(hers1$y)*(1317-1)) * sum(y - mean(hers1$y)^2)) / log(dcauchy(y,median(hers1$y),sd(hers1$y)))}
optimize( fyy , interval=c(-200, 200), maximum=T)
fyy <-  function(y)(  ((1+ (1/(nrow(hers1)-1) * (
(y- mean(hers1$y))^2/(var(hers1$y)))))^(-nrow(hers1)/2)  )  /
dcauchy(y,median(hers1$y),sd(hers1$y) ) )
optimize( fyy , interval=c(-200, 200), maximum=T)
fyy <- function(y){(-1317^2/2 + 1317/(var(hers1$y)*(1317-1)) * sum(y - mean(hers1$y)^2)) }
optimize( fyy , interval=c(-200, 200) )
curve(fyy(x))
fyy(1)
curve(fyy(x),from = -200 , to = 200)
fyy <- function(y){(-1317^2/2 + 1317/(var(hers1$y)*(1317-1)) * sum(y - mean(hers1$y)^2)) }
fyy <- function(z){(-1317^2/2 + 1317/(var(hers1$y)*(1317-1)) * sum(z - mean(hers1$y)^2)) }
curve(fyy(x),from = -200 , to = 200)
(var(hers1$y)
(var(hers1$y)*(1317-1))
curve(fyy(x),from = -200 , to = 200)
fyy <-  function(y)(  ((1+ (1/(nrow(hers1)-1) * (
(y- mean(hers1$y))^2/(var(hers1$y)))))^(-nrow(hers1)/2)  )  /
dcauchy(y,median(hers1$y),sd(hers1$y) ) )
curve(fyy(x),from = -200 , to = 200)
fy <- function(y,mu,ss,n)(  ( (1+ (1/(n-1) * ((y-mu)^2/(ss))))^(-n/2)  ) )
curve(fy(x, mean(hers1$y) , var(hers1$y), nrow(hers1) ),
from = -200 , to = 200 , ylim=c(0 ,1.25)  )
n
ss
fy2 <- function(y,mu,ss,n){  (-n^2/2) + ( (n/ss*(n-1)) * sum((y-mu)^2)  ) }
fy <- function(y,mu,ss,n)(  ( (1+ (1/(n-1) * ((y-mu)^2/(ss))))^(-n/2)  ) )
fy2 <- function(y,mu,ss,n){  (-n^2/2) + ( (n/ss*(n-1)) * sum((y-mu)^2)  ) }
curve(fy(x, mean(hers1$y) , var(hers1$y), nrow(hers1) ),
from = -200 , to = 200 , ylim=c(0 ,1.25)  )
curve(  135.7294 *  dcauchy(x,median(hers1$y), sd(hers1$y)),  add = T  )
fy <- function(y,mu,ss,n)(  ( (1+ (1/(n-1) * ((y-mu)^2/(ss))))^(-n/2)  ) )
curve(fy(x, mean(hers1$y) , var(hers1$y), nrow(hers1) ),
from = -200 , to = 200 , ylim=c(0 ,1.25)  )
Mu	<- vector(length = 1000)
Mu
mu
fx <- function(x){ ifelse( x < 0 , 0,
ifelse( 0 <= x & x < 0.5 ,  4*x ,
ifelse( 0.5 <= x & x <= 1, 4-4*x,
ifelse(  x < 1, 0, 0 )
)))}
### U(0,1) ###
curve(fx, from = 0-.05, to = 1+.05)
M <- 2
curve(M *dunif(x, 0, 1), add=TRUE, col="gold", lwd=2)
theta	<- vector(length = 1000)
arr <- NULL
t <- 1
count	<- 1
while(t < 1000){
tb	<- runif(1)
U	<- runif(1)
r <- fx(tb) / (M*dunif(tb))
if(U < r){
theta[t] <- tb
t <- t + 1
points( tb , M*U , col = "red" , pch = 16) } else {
points( (tb) ,M*U , col = "blue" , pch = 4) }
count	<- count + 1 }
t/count
mean(theta)
### Beta(2,2) ###
curve(fx, from = 0-.05, to = 1+.05 )
M <- fx(.5) / ( (0.5)*(1-0.5) * (6) )
curve(M *dbeta(x, 2, 2), add=T, col="darkblue", lwd=2)
theta	<- vector(length = 1000)
arr <- NULL
t <- 1
count	<- 1
while(t < 1000){
tb	<- rbeta(1,2,2)
U	<- runif(1)
r <- fx(tb) / (M*dbeta(tb,2,2))
if(U < r){
theta[t] <- tb
t <- t + 1
points( tb , M*U*dbeta(tb,2,2) , col = "red" , pch = 16) } else {
points( (tb) ,M*U*dbeta(tb,2,2) , col = "blue" , pch = 4) }
count	<- count + 1 }
t/count
#plot(density(theta), lwd = 8, col = 'blue')
#curve(dbeta(x, 6, 3), add = TRUE, col = 'red', lwd = 8)
mean(theta)
setwd("G:\\math\\640")
require(mvtnorm, quietly = T)
suppressMessages(require(MCMCpack, quietly = T))
require(mcmcplots, quietly = T)
suppressMessages(require(invgamma, quietly = T))
require(ggplot2)
hers <- read.table('hersreg.txt', header = T)
colnames(hers)[1] <- "y"
hers0 <- hers[ which(hers[ ,2] == 0), 1:2]
B <- 10000
ss <- Alpha <- mu <- rep(NA,B)
ss[1] <- Alpha[1] <- mu[1] <- 1
v <- 1
n <- nrow(hers0)
a <- b <- cc <- d <- .0001
set.seed(32717)
for (t in 2:B) {
Alpha[t] <- rinvgamma(1, (n)/2 + a,	b + (1/ 2 * ss[t-1])  * sum( (hers0$y - mu[t-1] )^2 ) )
mu[t] <- rnorm(1, mean(hers0$y) , sqrt( Alpha[t-1]*ss[t-1] / n) )
ss[t] <- rinvgamma( 1 , (n/2)+ cc ,  d + (1/(2*Alpha[t])) *		 sum( ( hers0$y - mu[t] )^2 )   )
}
# Burn in
Alpha <- matrix( tail(Alpha,B/2), ncol = 1);colnames(Alpha) <- "alpha"
mu <- matrix( tail(mu,B/2), ncol = 1);colnames(mu) <- "mu"
ss <- matrix( tail(ss,B/2), ncol = 1);colnames(ss) <- "sigma^2"
mcmcplot1(  ss , greek = T )
geweke.diag(mcmc(ss))
mcmcplot1(  Alpha, greek = T )
geweke.diag(mcmc(Alpha))
mcmcplot1(  mu , greek = T)
geweke.diag(mcmc(mu))
median(mu)
median(ss)
median(Alpha)
mu
quantile( as.vector(mu) , probs = c(0.5, 0.025, 0.975))[2:3]
qu <- quantile( as.vector(mu) , probs = c(0.5, 0.025, 0.975))[2:3]
d <- data.frame( density(theta)[[1]], round(density(theta)[[2]],6) )
colnames(d) = c("x" , "y" ); d$area <- d[,1] > qu[1] & d[,1] < qu[2]
ggplot( data = dc , aes(x=x , y=y)    ) + geom_line( col="red"  )
qu <- quantile( as.vector(mu) , probs = c(0.5, 0.025, 0.975))[2:3]
dc <- data.frame( density(theta)[[1]], round(density(theta)[[2]],6) )
colnames(dc) = c("x" , "y" ); dc$area <- dc[,1] > qu[1] & dc[,1] < qu[2]
ggplot( data = dc , aes(x=x , y=y)    ) + geom_line( col="red"  )
ggplot( data = dc , aes(x=x , y=y)    ) + geom_line( col="red"  ) +
geom_ribbon(data = dc[which(dc$area == T),], aes(x, ymin=0 , ymax=y ), fill="red", alpha = .15)
dc
which(dc[,3] == T)
qu <- quantile( as.vector(mu) , probs = c(0.5, 0.025, 0.975))[2:3]
dc <- data.frame( density(theta)[[1]], round(density(theta)[[2]],6) )
tail(dc)
colnames(dc) = c("x" , "y" )
tail(dc)
qu[1]
as.vector(mu)
dc <- data.frame( density(mu)[[1]], round(density(mu)[[2]],6) )
ggplot( data = dc , aes(x=x , y=y)    ) + geom_line( col="red"  ) +
geom_ribbon(data = dc[which(dc$area == T),], aes(x, ymin=0 , ymax=y ), fill="red", alpha = .15) +
theme(legend.position="none", axis.title.x=element_blank(), axis.title.y=element_blank(),
plot.title = element_text(hjust = 0.5)   )+ theme_minimal()
qu <- quantile( as.vector(mu) , probs = c(0.5, 0.025, 0.975))[2:3]
dc <- data.frame( density(mu)[[1]], round(density(mu)[[2]],6) )
colnames(dc) = c("x" , "y" ); dc$area <- dc[,1] > qu[1] & dc[,1] < qu[2]
ggplot( data = dc , aes(x=x , y=y)    ) + geom_line( col="red"  ) +
geom_ribbon(data = dc[which(dc$area == T),], aes(x, ymin=0 , ymax=y ), fill="red", alpha = .15) +
theme(legend.position="none", axis.title.x=element_blank(), axis.title.y=element_blank(),
plot.title = element_text(hjust = 0.5)   )+ theme_minimal()
qu <- quantile( as.vector(ss) , probs = c(0.5, 0.025, 0.975))[2:3]
dc <- data.frame( density(ss)[[1]], round(density(ss)[[2]],6) )
colnames(dc) = c("x" , "y" ); dc$area <- dc[,1] > qu[1] & dc[,1] < qu[2]
ssp <- ggplot( data = dc , aes(x=x , y=y)    ) + geom_line( col="red"  ) +
geom_ribbon(data = dc[which(dc$area == T),], aes(x, ymin=0 , ymax=y ), fill="red", alpha = .15) +
theme(legend.position="none", axis.title.x=element_blank(), axis.title.y=element_blank(),
plot.title = element_text(hjust = 0.5)   )+ theme_minimal()
ssp
mu
qu <- quantile( as.vector(ss) , probs = c(0.5, 0.025, 0.975))[2:3]
dc <- data.frame( density(ss)[[1]], round(density(ss)[[2]],6) )
colnames(dc) = c("x" , "y" ); dc$area <- dc[,1] > qu[1] & dc[,1] < qu[2]
alphap <- ggplot( data = dc , aes(x=x , y=y)    ) + geom_line( col="green"  ) +
geom_ribbon(data = dc[which(dc$area == T),], aes(x, ymin=0 , ymax=y ), fill="green", alpha = .15) +
theme(legend.position="none", axis.title.x=element_blank(), axis.title.y=element_blank(),
plot.title = element_text(hjust = 0.5)   )+ theme_minimal()
ssp
ss
max(ss)
min(ss)
ss
tail(ss)
tail(Alpha)
