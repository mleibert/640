polr( as.factor(cyl) ~ mpg +  disp + hp  , data= dat  , Hess = T, method = "probit" )
mtcars
polr( Y ~ rnorm(length(Y))    , Hess = T, method = "probit" )
onp <- read.csv("onp_train.csv",header = T)
setwd("G:\\math\\650")
onp <- read.csv("onp_train.csv",header = T)
setwd("G:\\math\\640")
onp <- read.csv("onp_train.csv",header = T)
head(onp)
colnames(onp)
onp[,c(5:11,)]
onp[,c(5:11 )]
onp[,c(5:13 )]
colnames(onp)
onp[,c(5:13 )]
X <- onp[,c(5:13 )]
onp[,ncol(onp)]
Y <- onp[,ncol(onp)]
polr( Y~X   )
X
X <- onp[,c(5:13,ncol(onp) )]
head(X)
polr(share_cat ~ . , data = X   )
polr( as.factor(share_cat) ~ . , data = X   )
head(onp)
colnames(onp)
X <- onp[,c(5:44,47,ncol(onp) )]
head(X)
str(X)
polr( as.factor(share_cat) ~ . , data = X   )
fit <- polr( as.factor(share_cat) ~ . , data = X   )
X <- onp[,c(5:44,47  )]
fit <- polr( as.factor(share_cat) ~ . , data = onp   )
X%*%coef(fit)
X
rmvnorm(1, as.matrix(X)%*%coef(fit) )
as.matrix(X)
str(X)
X <- model.matrix(fit)
X
(X)%*%coef(fit)
dim(X)
length(coef(fit))
X[,1]
coef(fit)
rmvnorm(1,  (X[,-1])%*%coef(fit) )
t(X[1,-1])%*%coef(fit)
t(X[1,-1])%*%coef(fit)
apply( X , 1 , function(Q) t(Q[,-1]) %*% coef(fit) )
apply( X , 1 , function(Q) t(Q[-1]) %*% coef(fit) )
length( apply( X , 1 , function(Q) t(Q[-1]) %*% coef(fit) ) )
apply( X , 1 , function(Q) t(Q[-1]) %*% coef(fit) ) )
apply( X , 1 , function(Q) t(Q[-1]) %*% coef(fit) )
rmvnorm(1, c(1,2,3))
Z <- rmvnorm(1 , apply( X , 1 , function(Q) t(Q[-1]) %*% coef(fit) )  )
nrow(X)
Z
apply( X , 1 , function(Q) t(Q[-1]) %*% coef(fit) )
xtb <- apply( X , 1 , function(Q) t(Q[-1]) %*% coef(fit) )
Z <- rep(NA,nrow(X))
for( i in 1:nrow(X)){
Z[i] <- rnorm( 1 , xtb[i], 1 )
}
1
Z
Z
B <- 1000
Z <- matrix(NA, B , nrow(X))
for( i in 1:nrow(X)){
Z[1,i] <- rnorm( 1 , xtb[i], 1 )
}
head(Z)
Z[1,1]
gam <- data.frame(Z[1,], Y )
head(gam)
gam <- data.frame( z = Z[1,], Y )
head(gam)
which(gam$Y == 1)
gam1 <- gam[which(gam$Y == 1),]
gam1
gam[which(gam$Y == 1),]
gam[which(gam$Y == 1),]$z
gam1 <- max( gam[which(gam$Y == 1),]$z )
gam1
arg1
arg1 <- max( gam[which(gam$Y == 1),]$z )
arg2 <- min( gam[which(gam$Y == 2),]$z )
arg2
arg1
MCMCoprobit
x1 <- rnorm(100); x2 <- rnorm(100);
z <- 1.0 + x1*0.1 - x2*0.5 + rnorm(100);
y <- z; y[z < 0] <- 0; y[z >= 0 & z < 1] <- 1;
y[z >= 1 & z < 1.5] <- 2; y[z >= 1.5] <- 3;
y
out1 <- MCMCoprobit(y ~ x1 + x2, tune=0.3)
summary(out1)
out1
out1
z
y
arg1 <- max( gam[which(gam$Y == 1),]$z )
arg2 <- min( gam[which(gam$Y == 2),]$z )
max(arg1)
arg1
gam
unique(gam[,2])
gamma
Gamma
arg1 <- max( gam[which(gam$Y == 1),]$z )
arg1
gammas <- matrix( NA, B, 4 )
gammas
for( j in 2:unique(gam[,2]-1)){ gammas[,j] <- mean( gam[ which(gam[,2] == j), 1]) }
for( j in 2:unique(gam[,2]-1)){ gammas[1,j] <- mean( gam[ which(gam[,2] == j), 1]) }
mean( gam[ which(gam[,2] == j), 1])
j = 1
j = 2\
j = 2
which(gam[,2] == j)
gam[ which(gam[,2] == j) , 1]
mean( gam[ which(gam[,2] == j) , 1] )
gammas[1,j]
2:unique(gam[,2]-1)
2:unique(gam[,2]-1)
(unique(gam[,2]-1)
)
2:(unique(gam[,2]-1
)
2:4
for( j in 2:4  ) { gammas[1,j] <- mean( gam[ which(gam[,2] == j) , 1] ) }
gammas[1, ]
2:4
gammas <- matrix( NA, B, 4 )
for( j in 2:4  ) { gammas[1,j] <- mean( gam[ which(gam[,2] == j) , 1] ) }
gammas[1, ]
gammas <- matrix( NA, B, 4 ); gammas[,1] <- 0
for( j in 2:4  ) { gammas[1,j] <- mean( gam[ which(gam[,2] == j) , 1] ) }
gammas[1, ]
gam
max(gam[1,])
gam[1,]
max(gam[,1])
which(
max(gam[,1])
)
which(
gam$z ==
max(gam[,1])
)
opt[23486,]
onp[23486,]
max(onp$shares)
t
i
gam <- data.frame( z = Z[i,], Y )
i = 2
gam <- data.frame( z = Z[i,], Y )
head(gam)
gam <- data.frame( z = Z[i-1,], Y )
head(gam)
arg1 <- max( gam[which(gam$Y == 1),]$z )
arg2 <- min( gam[which(gam$Y == 2),]$z )
arg1
runif(  )
arg2
runif( 1 , 10 , 1 )
ax(max(arg1, gammas[i,1]  ))
max(max(arg1, gammas[i,1]  ))
arg2
gammas[i-1,3]
min(min( arg2 , gammas[i-1,3]  ))
runif( 1, max(max(arg1, gammas[i,1]  )) , min(min( arg2 , gammas[i-1,3]  )) )
arg3 <- c( max(max(arg1, gammas[i,1]  )) , min(min( arg2 , gammas[i-1,3]  )))
runif( 1, min(arg3),max(arg3))
min(arg3)
max(arg3)
fit
#sample gammas
for( J in 2:4 ){
arg1 <- max( gam[which(gam$Y == j),]$z )
arg2 <- min( gam[which(gam$Y == (j+1)),]$z )
arg3 <- c( max(max(arg1, gammas[i,1]  )) , min(min( arg2 , gammas[i-1,3]  )))
gammas[i,j] <- runif( 1, min(arg3),max(arg3))
}
gammas[i , ]
max( gam[which(gam$Y == j),]$z )
j
j = 2
gammas[i, ] <- 0
gammas[i, ]
j = 2
arg1 <- max( gam[which(gam$Y == j),]$z )
arg2 <- min( gam[which(gam$Y == (j+1)),]$z )
arg3 <- c( max(max(arg1, gammas[i,1]  )) , min(min( arg2 , gammas[i-1,3]  )))
arg3
gammas[i,j] <- runif( 1, min(arg3),max(arg3))
gammas[i, ]
j = 3
arg1 <- max( gam[which(gam$Y == j),]$z )
arg2 <- min( gam[which(gam$Y == (j+1)),]$z )
arg3 <- c( max(max(arg1, gammas[i,1]  )) , min(min( arg2 , gammas[i-1,3]  )))
arg3
gammas[i,j] <- runif( 1, min(arg3),max(arg3))
gammas[i, ]
j = 4
arg1 <- max( gam[which(gam$Y == j),]$z )
arg2 <- min( gam[which(gam$Y == (j+1)),]$z )
arg3 <- c( max(max(arg1, gammas[i,1]  )) , min(min( arg2 , gammas[i-1,3]  )))
gammas[i,j] <- runif( 1, min(arg3),max(arg3))
gammas[i, ]
gam <- data.frame( z = Z[i-1,], Y )
for( j in 2:4 ){
arg1 <- max( gam[which(gam$Y == j),]$z )
arg2 <- min( gam[which(gam$Y == (j+1)),]$z )
arg3 <- c( max(max(arg1, gammas[i,1]  )) , min(min( arg2 , gammas[i-1,3]  )))
gammas[i,j] <- runif( 1, min(arg3),max(arg3))
}
gammas[i,]
betas <- matrix(NA, B , length(coef(fit)))
betas[1,] <- coef(fit)
xtb <- apply( X , 1 , function(Q) t(Q[-1]) %*%  betas[1,] )
xtxi <- solve(t(X)%*%X)
t(X)%*%X
xtxi <- solve(t(X)%*%X)
solve
xtxi <- solve(t(X)%*%X, tol = 1e-09)
xtxi <- solve(t(X)%*%X, tol = 1e-16)
xtxi <- solve(t(X)%*%X, tol = 1e-18)
xtxi
#sample betas
bhat <-
rmvnorm(1,  xtxi %*% (t(X)%*%Z[i,]))
bhat
#sample betas
bhat <-
rmvnorm(1,  xtxi %*% (t(X)%*%Z[i,]) , xtxi )
bhat
xtxi %*% (t(X)%*%Z[i,])
(t(X)%*%Z[i,])
Z[i,]
#sample Z's
xtb <- apply( X , 1 , function(Q) t(Q[-1]) %*%   betas[i-1,] )
i
for( k in 1:nrow(X)){  Z[i,k] <- rnorm( 1 , xtb[k], 1 ) }
#sample betas
bhat <-
rmvnorm(1,  xtxi %*% (t(X)%*%Z[i,]) , xtxi )
bhat
rm(bhat)
#sample betas
bhat  <- rmvnorm(1,  xtxi %*% (t(X)%*%Z[i,]) , xtxi )
#sample betas
betas[i,] <- rmvnorm(1,  xtxi %*% (t(X)%*%Z[i,]) , xtxi )
etas[i,]
betas[i,]
rmvnorm(1,  xtxi %*% (t(X)%*%Z[i,]) , xtxi )
X[,-1]
X[,1]
X <- X[,-1]
xtxi <- solve(t(X)%*%X)
xtxi <- solve(t(X)%*%X, tol = 1e-18)
#sample betas
betas[i,] <- rmvnorm(1,  xtxi %*% (t(X)%*%Z[i,]) , xtxi )
for( i in 1:B) {
#sample gammas
gam <- data.frame( z = Z[i-1,], Y )
for( j in 2:4 ){
arg1 <- max( gam[which(gam$Y == j),]$z )
arg2 <- min( gam[which(gam$Y == (j+1)),]$z )
arg3 <- c( max(max(arg1, gammas[i,1]  )) , min(min( arg2 , gammas[i-1,3]  )))
gammas[i,j] <- runif( 1, min(arg3),max(arg3)) # gammas[i,]
}
#sample Z's
xtb <- apply( X , 1 , function(Q) t(Q[-1]) %*%   betas[i-1,] )
for( k in 1:nrow(X)){  Z[i,k] <- rnorm( 1 , xtb[k], 1 ) }
#sample betas
betas[i,] <- rmvnorm(1,  xtxi %*% (t(X)%*%Z[i,]) , xtxi )
}
i
for( i in 2:B) {
#sample gammas
gam <- data.frame( z = Z[i-1,], Y )
for( j in 2:4 ){
arg1 <- max( gam[which(gam$Y == j),]$z )
arg2 <- min( gam[which(gam$Y == (j+1)),]$z )
arg3 <- c( max(max(arg1, gammas[i,1]  )) , min(min( arg2 , gammas[i-1,3]  )))
gammas[i,j] <- runif( 1, min(arg3),max(arg3)) # gammas[i,]
}
#sample Z's
xtb <- apply( X , 1 , function(Q) t(Q[-1]) %*%   betas[i-1,] )
for( k in 1:nrow(X)){  Z[i,k] <- rnorm( 1 , xtb[k], 1 ) }
#sample betas
betas[i,] <- rmvnorm(1,  xtxi %*% (t(X)%*%Z[i,]) , xtxi )
}
rm(list=ls());gc()
require(MCMCpack)
require(mvtnorm)
require(MASS)
library(foreign)
setwd("G:\\math\\640")
onp <- read.csv("onp_train.csv",header = T)
head(onp)
onp <- onp[,c(5:44,47,ncol(onp) )]
head(X)
setwd("G:\\math\\640")
onp <- read.csv("onp_train.csv",header = T)
head(onp)
onp <- onp[,c(5:44,47,ncol(onp) )]
fit <- polr( as.factor(share_cat) ~ . , data = onp   )
X <- model.matrix(fit)
X <- X[,-1]
B <- 1000
betas <- matrix(NA, B , length(coef(fit)))
betas[1,] <- coef(fit)
Z <- matrix(NA, B , nrow(X))
xtb <- apply( X , 1 , function(Q) t(Q ) %*%  betas[1,] )
for( i in 1:nrow(X)){  Z[1,i] <- rnorm( 1 , xtb[i], 1 ) }
gammas <- matrix( NA, B, 4 ); gammas[,1] <- 0
for( j in 2:4  ) { gammas[1,j] <- mean( gam[ which(gam[,2] == j) , 1] ) }
gam <- data.frame( z = Z[1,], Y )
Y <- as.factor( onp[,ncol(onp)] )
Z <- matrix(NA, B , nrow(X))
xtb <- apply( X , 1 , function(Q) t(Q ) %*%  betas[1,] )
for( i in 1:nrow(X)){  Z[1,i] <- rnorm( 1 , xtb[i], 1 ) }
gammas <- matrix( NA, B, 4 ); gammas[,1] <- 0
gam <- data.frame( z = Z[1,], Y )
for( j in 2:4  ) { gammas[1,j] <- mean( gam[ which(gam[,2] == j) , 1] ) }
xtxi <- solve(t(X)%*%X, tol = 1e-18)
for( i in 2:B) {
#sample gammas
gam <- data.frame( z = Z[i-1,], Y )
for( j in 2:4 ){
arg1 <- max( gam[which(gam$Y == j),]$z )
arg2 <- min( gam[which(gam$Y == (j+1)),]$z )
arg3 <- c( max(max(arg1, gammas[i,1]  )) , min(min( arg2 , gammas[i-1,3]  )))
gammas[i,j] <- runif( 1, min(arg3),max(arg3)) # gammas[i,]
}
#sample Z's
xtb <- apply( X , 1 , function(Q) t(Q[-1]) %*%   betas[i-1,] )
for( k in 1:nrow(X)){  Z[i,k] <- rnorm( 1 , xtb[k], 1 ) }
#sample betas
betas[i,] <- rmvnorm(1,  xtxi %*% (t(X)%*%Z[i,]) , xtxi )
}
i
for( i in 2:B) {
#sample gammas
gam <- data.frame( z = Z[i-1,], Y )
for( j in 2:4 ){
arg1 <- max( gam[which(gam$Y == j),]$z )
arg2 <- min( gam[which(gam$Y == (j+1)),]$z )
arg3 <- c( max(max(arg1, gammas[i,1]  )) , min(min( arg2 , gammas[i-1,3]  )))
gammas[i,j] <- runif( 1, min(arg3),max(arg3)) # gammas[i,]
}
#sample Z's
xtb <- apply( X , 1 , function(Q) t(Q ) %*%   betas[i-1,] )
for( k in 1:nrow(X)){  Z[i,k] <- rnorm( 1 , xtb[k], 1 ) }
#sample betas
betas[i,] <- rmvnorm(1,  xtxi %*% (t(X)%*%Z[i,]) , xtxi )
}
rm(list=ls());gc()
require(MCMCpack)
require(mvtnorm)
require(MASS)
library(foreign)
setwd("G:\\math\\640")
onp <- read.csv("onp_train.csv",header = T)
head(onp)
onp <- onp[,c(5:44,47,ncol(onp) )]
fit <- polr( as.factor(share_cat) ~ . , data = onp   )
X <- model.matrix(fit)
X <- X[,-1]
Y <- as.factor( onp[,ncol(onp)] )
B <- 10000
betas <- matrix(NA, B , length(coef(fit)))
betas[1,] <- coef(fit)
Z <- matrix(NA, B , nrow(X))
xtb <- apply( X , 1 , function(Q) t(Q ) %*%  betas[1,] )
for( i in 1:nrow(X)){  Z[1,i] <- rnorm( 1 , xtb[i], 1 ) }
gammas <- matrix( NA, B, 4 ); gammas[,1] <- 0
gam <- data.frame( z = Z[1,], Y )
for( j in 2:4  ) { gammas[1,j] <- mean( gam[ which(gam[,2] == j) , 1] ) }
xtxi <- solve(t(X)%*%X, tol = 1e-18)
for( i in 2:B) {
#sample gammas
gam <- data.frame( z = Z[i-1,], Y )
for( j in 2:4 ){
arg1 <- max( gam[which(gam$Y == j),]$z )
arg2 <- min( gam[which(gam$Y == (j+1)),]$z )
arg3 <- c( max(max(arg1, gammas[i,1]  )) , min(min( arg2 , gammas[i-1,3]  )))
gammas[i,j] <- runif( 1, min(arg3),max(arg3)) # gammas[i,]
}
#sample Z's
xtb <- apply( X , 1 , function(Q) t(Q ) %*%   betas[i-1,] )
for( k in 1:nrow(X)){  Z[i,k] <- rnorm( 1 , xtb[k], 1 ) }
#sample betas
betas[i,] <- rmvnorm(1,  xtxi %*% (t(X)%*%Z[i,]) , xtxi )
}
rm(list=ls());gc()
require(MCMCpack)
require(mvtnorm)
require(MASS)
library(foreign)
setwd("G:\\math\\640")
onp <- read.csv("onp_train.csv",header = T)
head(onp)
onp <- onp[,c(5:44,47,ncol(onp) )]
fit <- polr( as.factor(share_cat) ~ . , data = onp   )
X <- model.matrix(fit)
X <- X[,-1]
Y <- as.factor( onp[,ncol(onp)] )
B <- 10000
betas <- matrix(NA, B , length(coef(fit)))
betas[1,] <- coef(fit)
Z <- matrix(NA, B , nrow(X))
xtb <- apply( X , 1 , function(Q) t(Q ) %*%  betas[1,] )
for( i in 1:nrow(X)){  Z[1,i] <- rnorm( 1 , xtb[i], 1 ) }
gammas <- matrix( NA, B, 4 ); gammas[,1] <- 0
gam <- data.frame( z = Z[1,], Y )
for( j in 2:4  ) { gammas[1,j] <- mean( gam[ which(gam[,2] == j) , 1] ) }
xtxi <- solve(t(X)%*%X, tol = 1e-18)
for( i in 2:B) {
#sample gammas
gam <- data.frame( z = Z[i-1,], Y )
for( j in 2:4 ){
arg1 <- max( gam[which(gam$Y == j),]$z )
arg2 <- min( gam[which(gam$Y == (j+1)),]$z )
arg3 <- c( max(max(arg1, gammas[i,1]  )) , min(min( arg2 , gammas[i-1,3]  )))
gammas[i,j] <- runif( 1, min(arg3),max(arg3)) # gammas[i,]
}
#sample Z's
xtb <- apply( X , 1 , function(Q) t(Q ) %*%   betas[i-1,] )
for( k in 1:nrow(X)){  Z[i,k] <- rnorm( 1 , xtb[k], 1 ) }
#sample betas
betas[i,] <- rmvnorm(1,  xtxi %*% (t(X)%*%Z[i,]) , xtxi )
}
i
require(beepr)
rm(list=ls());gc()
require(MCMCpack)
require(mvtnorm)
require(MASS)
library(foreign)
require(beepr)
setwd("G:\\math\\640")
onp <- read.csv("onp_train.csv",header = T)
head(onp)
onp <- onp[,c(5:44,47,ncol(onp) )]
fit <- polr( as.factor(share_cat) ~ . , data = onp   )
X <- model.matrix(fit)
X <- X[,-1]
Y <- as.factor( onp[,ncol(onp)] )
B <- 1000
betas <- matrix(NA, B , length(coef(fit)))
betas[1,] <- coef(fit)
Z <- matrix(NA, B , nrow(X))
xtb <- apply( X , 1 , function(Q) t(Q ) %*%  betas[1,] )
for( i in 1:nrow(X)){  Z[1,i] <- rnorm( 1 , xtb[i], 1 ) }
gammas <- matrix( NA, B, 4 ); gammas[,1] <- 0
gam <- data.frame( z = Z[1,], Y )
for( j in 2:4  ) { gammas[1,j] <- mean( gam[ which(gam[,2] == j) , 1] ) }
xtxi <- solve(t(X)%*%X, tol = 1e-18)
####
system.time(
for( i in 2:B) {
#sample gammas
gam <- data.frame( z = Z[i-1,], Y )
for( j in 2:4 ){
arg1 <- max( gam[which(gam$Y == j),]$z )
arg2 <- min( gam[which(gam$Y == (j+1)),]$z )
arg3 <- c( max(max(arg1, gammas[i,1]  )) , min(min( arg2 , gammas[i-1,3]  )))
gammas[i,j] <- runif( 1, min(arg3),max(arg3)) # gammas[i,]
}
#sample Z's
xtb <- apply( X , 1 , function(Q) t(Q ) %*%   betas[i-1,] )
for( k in 1:nrow(X)){  Z[i,k] <- rnorm( 1 , xtb[k], 1 ) }
#sample betas
betas[i,] <- rmvnorm(1,  xtxi %*% (t(X)%*%Z[i,]) , xtxi )
}
); beep("coin")
tail(betas)
tail(gammas)
plot(density(gammas[,2]))
plot(density(gammas[,3]))
plot(density(gammas[,2]))
plot(density(gammas[,3]))
plot(density(gammas[,2])); median(gammas[,2])
plot(density(gammas[,3])); median(gammas[,3])
fit
plot(density(gammas[,3])); median(gammas[,3])
plot(density(gammas[,2])); median(gammas[,2])
plot(density(gammas[,3])); median(gammas[,3])
plot(density(gammas[,4])); median(gammas[,4])
fit
median(gammas[,4])
gammas[,4]
tail(Z)
Z[B,1]
B
Z[B,1:10]
betas <- tail(betas, B/2)
gammas<- tail(gammas, B/2)
Z <- tail(Z, B/2)
plot(density(gammas[,2])); median(gammas[,2])
plot(density(gammas[,3])); median(gammas[,3])
plot(density(gammas[,4])); median(gammas[,4])
fit
median(betas[,1])
betas[,1]
head(betas)
median(betas[,1])
fit
